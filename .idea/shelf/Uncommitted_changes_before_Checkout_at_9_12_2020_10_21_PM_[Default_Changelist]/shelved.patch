Index: epicbot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import discord\r\nfrom discord import Client\r\nfrom discord.ext.commands import Bot\r\nimport praw\r\nfrom dotenv import load_dotenv\r\nimport os\r\n\r\n# comment out these two lines if you are not using spyder\r\n#import nest_asyncio\r\n#nest_asyncio.apply()\r\n\r\nBOT_PREFIX = ('!')\r\nclient = Bot(command_prefix=BOT_PREFIX)\r\nload_dotenv()\r\n\r\nTOKEN = os.getenv('DISCORD_TOKEN')\r\nSECRET = os.getenv('CLIENT_SECRET')\r\nID = os.getenv('CLIENT_ID')\r\naliases = ['hot{}'.format(i+1) for i in range(10)]+['top{}'.format(i+1) for i in range(10)]+['new{}'.format(i+1) for i in range(10)]+ ['rising{}'.format(i+1) for i in range(10)]\r\ntopx = ['top{}'.format(i+1) for i in range(10)]\r\nbaseURL = 'https://www.reddit.com'\r\n\r\n\r\nreddit = praw.Reddit(client_id=ID,\r\n                            client_secret=SECRET,\r\n                            user_agent=\"EpicBot for Reddit\")\r\n@client.event\r\nasync def on_ready():\r\n    print('Logged in as')\r\n    print(client.user.name)\r\n    print(client.user.id)\r\n    print('------')\r\n\r\n@client.command(name='hey',\r\n                brief='The bot says hi',\r\n                aliases = ['hi','greetings','hello'])\r\nasync def hey(ctx):\r\n    # we do not want the bot to reply to itself\r\n    if ctx.message.author.id == client.user.id:\r\n        return\r\n    await ctx.send('hey {0.author.mention}'.format(ctx.message))\r\n\r\n@client.command(name='Post',\r\n                brief='Posts given number of posts from a subreddit.',\r\n                aliases = aliases)\r\nasync def hot(ctx, *args):\r\n    if not args:\r\n        await ctx.channel.send('Please specify subreddit')\r\n        return\r\n    if ctx.invoked_with not in aliases:\r\n        await ctx.channel.send('Invalid command.  Use !help for a list of valid commands.')\r\n        return\r\n    lim = ''.join(c for c in ctx.invoked_with if c.isdigit())\r\n    if not lim:\r\n        lim = 5\r\n    lim = int(lim)\r\n\r\n\r\n\r\n    command = ''.join(c for c in ctx.invoked_with if not c.isdigit()).lower()\r\n\r\n\r\n    post_type = None\r\n\r\n\r\n    if command == 'hot':\r\n        post_type = reddit.subreddit(args[0]).hot(limit=lim)\r\n    elif command == 'top':\r\n        post_type = reddit.subreddit(args[0]).top(limit=lim)\r\n    elif command == 'new':\r\n        post_type = reddit.subreddit(args[0]).rising(limit=lim)\r\n    elif command == 'rising':\r\n        post_type = reddit.subreddit(args[0]).new(limit=lim)\r\n\r\n    for submission in post_type:\r\n        embedVar = discord.Embed(title = submission.title, color = 0xff5700)\r\n        embedVar.set_author(name=\"u/\"+submission.author.name, icon_url= submission.author.icon_img)\r\n        if not submission.is_self:\r\n            embedVar.set_image(url= submission.url)\r\n        embedVar.add_field(name=\"URL:\", value=baseURL + submission.permalink)\r\n        embedVar.add_field(name=\"Upvotes:\", value=submission.score)\r\n        embedVar.set_thumbnail(\r\n            url='https://i.imgur.com/5uefD9U.png',\r\n                  )\r\n        await ctx.channel.send(embed=embedVar)\r\n\r\n\r\n\r\n\r\n#await ctx.channel.send(submission.title)\r\n#await ctx.channel.send(\"COMMENT:\" + submission.comments[1].body)\r\n#await ctx.channel.send(\"UPVOTES: {}\".format(submission.score))\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n\ttry:\r\n\t\tclient.run(TOKEN)\r\n\texcept KeyboardInterrupt:\r\n\t\tprint('exiting\\n')\r\n\t\texit(0)\r\n\texcept:\r\n\t\tpass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- epicbot.py	(revision 9f467e10df27eec829020f8d97d4dffdda1c874c)
+++ epicbot.py	(date 1599963546271)
@@ -73,7 +73,9 @@
         post_type = reddit.subreddit(args[0]).new(limit=lim)
 
     for submission in post_type:
-        embedVar = discord.Embed(title = submission.title, color = 0xff5700)
+        new_title = submission.title
+        abridged_title = (new_title[:250] + '...') if len(new_title) > 250 else new_title
+        embedVar = discord.Embed(title = abridged_title, color = 0xff5700)
         embedVar.set_author(name="u/"+submission.author.name, icon_url= submission.author.icon_img)
         if not submission.is_self:
             embedVar.set_image(url= submission.url)
