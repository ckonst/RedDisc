Index: epicbot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import discord\r\nfrom discord import Client\r\nfrom discord.ext.commands import Bot\r\nimport praw\r\nfrom dotenv import load_dotenv\r\nimport os\r\n\r\n# comment out these two lines if you are not using spyder\r\n# import nest_asyncio\r\n# nest_asyncio.apply()\r\n\r\nBOT_PREFIX = ('!')\r\nclient = Bot(command_prefix=BOT_PREFIX)\r\nload_dotenv()\r\n\r\nTOKEN = os.getenv('DISCORD_TOKEN')\r\nSECRET = os.getenv('CLIENT_SECRET')\r\nID = os.getenv('CLIENT_ID')\r\ntopx = ['top{}'.format(i+1) for i in range(10)]\r\nbase_url = 'https://www.reddit.com'\r\nreddit = praw.Reddit(client_id=ID,\r\n                     client_secret=SECRET,\r\n                     user_agent='EpicBot for Reddit')\r\n\r\n\r\n@client.event\r\nasync def on_ready():\r\n    \"\"\"\r\n    Print messages to indicate a successful login.\r\n\r\n    Returns\r\n    -------\r\n    None.\r\n\r\n    \"\"\"\r\n    print('Logged in as')\r\n    print(client.user.name)\r\n    print(client.user.id)\r\n    print('------')\r\n\r\n\r\n@client.command(name='top',\r\n                brief='Post given number of posts from a subreddit.',\r\n                aliases=topx)\r\nasync def top(ctx, *args):\r\n    \"\"\"\r\n    Post the top x posts from a given subreddit to the channel.\r\n\r\n    Parameters\r\n    ----------\r\n    ctx : discord.ext.commands.Context\r\n        The context in which the command is being invoked under.\r\n    *args : list\r\n        The list of transformed arguments that were passed into the command.\r\n\r\n    Returns\r\n    -------\r\n    None.\r\n\r\n    \"\"\"\r\n    if not args:\r\n        await ctx.channel.send('Please specify subreddit')\r\n        return\r\n    if ctx.invoked_with not in topx:\r\n        await ctx.channel.send('Invalid command.\\\r\n                               Use !help for a list of valid commands.')\r\n        return\r\n    lim = ''.join(c for c in ctx.invoked_with if c.isdigit())\r\n    if not lim:\r\n        lim = 5\r\n    lim = int(lim)\r\n\r\n    for submission in reddit.subreddit(args[0]).hot(limit=lim):\r\n        embed = discord.Embed(title=submission.title, color=0xff5700)\r\n        embed.set_author(name='u/'+submission.author.name,\r\n                         icon_url=submission.author.icon_img)\r\n        if not submission.is_self:\r\n            embed.set_image(url=submission.url)\r\n        embed.add_field(name='URL:', value=base_url + submission.permalink)\r\n        embed.add_field(name='Upvotes:', value=submission.score)\r\n        embed.set_thumbnail(url='https://i.imgur.com/5uefD9U.png')\r\n        await ctx.channel.send(embed=embed)\r\n\r\nif __name__ == '__main__':\r\n    try:\r\n        client.run(TOKEN)\r\n    except KeyboardInterrupt:\r\n        print('exiting\\n')\r\n        exit(0)\r\n    except:\r\n        pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- epicbot.py	(revision 8d4504eb6ad95255347d7eb16bd22baf3db3be32)
+++ epicbot.py	(date 1599963743505)
@@ -6,8 +6,8 @@
 import os
 
 # comment out these two lines if you are not using spyder
-# import nest_asyncio
-# nest_asyncio.apply()
+#import nest_asyncio
+#nest_asyncio.apply()
 
 BOT_PREFIX = ('!')
 client = Bot(command_prefix=BOT_PREFIX)
@@ -16,76 +16,92 @@
 TOKEN = os.getenv('DISCORD_TOKEN')
 SECRET = os.getenv('CLIENT_SECRET')
 ID = os.getenv('CLIENT_ID')
+aliases = ['hot{}'.format(i+1) for i in range(10)]+['top{}'.format(i+1) for i in range(10)]+['new{}'.format(i+1) for i in range(10)]+ ['rising{}'.format(i+1) for i in range(10)]
 topx = ['top{}'.format(i+1) for i in range(10)]
-base_url = 'https://www.reddit.com'
+baseURL = 'https://www.reddit.com'
+
+
 reddit = praw.Reddit(client_id=ID,
-                     client_secret=SECRET,
-                     user_agent='EpicBot for Reddit')
-
-
+                            client_secret=SECRET,
+                            user_agent="EpicBot for Reddit")
 @client.event
 async def on_ready():
-    """
-    Print messages to indicate a successful login.
-
-    Returns
-    -------
-    None.
-
-    """
     print('Logged in as')
     print(client.user.name)
     print(client.user.id)
     print('------')
 
-
-@client.command(name='top',
-                brief='Post given number of posts from a subreddit.',
-                aliases=topx)
-async def top(ctx, *args):
-    """
-    Post the top x posts from a given subreddit to the channel.
+@client.command(name='hey',
+                brief='The bot says hi',
+                aliases = ['hi','greetings','hello'])
+async def hey(ctx):
+    # we do not want the bot to reply to itself
+    if ctx.message.author.id == client.user.id:
+        return
+    await ctx.send('hey {0.author.mention}'.format(ctx.message))
 
-    Parameters
-    ----------
-    ctx : discord.ext.commands.Context
-        The context in which the command is being invoked under.
-    *args : list
-        The list of transformed arguments that were passed into the command.
-
-    Returns
-    -------
-    None.
-
-    """
+@client.command(name='Post',
+                brief='Posts given number of posts from a subreddit.',
+                aliases = aliases)
+async def hot(ctx, *args):
     if not args:
         await ctx.channel.send('Please specify subreddit')
         return
-    if ctx.invoked_with not in topx:
-        await ctx.channel.send('Invalid command.\
-                               Use !help for a list of valid commands.')
+    if ctx.invoked_with not in aliases:
+        await ctx.channel.send('Invalid command.  Use !help for a list of valid commands.')
         return
     lim = ''.join(c for c in ctx.invoked_with if c.isdigit())
     if not lim:
         lim = 5
     lim = int(lim)
 
-    for submission in reddit.subreddit(args[0]).hot(limit=lim):
-        embed = discord.Embed(title=submission.title, color=0xff5700)
-        embed.set_author(name='u/'+submission.author.name,
-                         icon_url=submission.author.icon_img)
+
+
+    command = ''.join(c for c in ctx.invoked_with if not c.isdigit()).lower()
+
+
+    post_type = None
+
+
+    if command == 'hot':
+        post_type = reddit.subreddit(args[0]).hot(limit=lim)
+    elif command == 'top':
+        post_type = reddit.subreddit(args[0]).top(limit=lim)
+    elif command == 'new':
+        post_type = reddit.subreddit(args[0]).rising(limit=lim)
+    elif command == 'rising':
+        post_type = reddit.subreddit(args[0]).new(limit=lim)
+
+    for submission in post_type:
+        new_title = submission.title
+        abridged_title = (new_title[:250] + '...') if len(new_title) > 250 else new_title
+        embedVar = discord.Embed(title = abridged_title, color = 0xff5700)
+        embedVar.set_author(name="u/"+submission.author.name, icon_url= submission.author.icon_img)
         if not submission.is_self:
-            embed.set_image(url=submission.url)
-        embed.add_field(name='URL:', value=base_url + submission.permalink)
-        embed.add_field(name='Upvotes:', value=submission.score)
-        embed.set_thumbnail(url='https://i.imgur.com/5uefD9U.png')
-        await ctx.channel.send(embed=embed)
+            embedVar.set_image(url= submission.url)
+        embedVar.add_field(name="URL:", value=baseURL + submission.permalink)
+        embedVar.add_field(name="Upvotes:", value=submission.score)
+        embedVar.set_thumbnail(
+            url='https://i.imgur.com/5uefD9U.png',
+                  )
+        await ctx.channel.send(embed=embedVar)
+
+
+
+
+#await ctx.channel.send(submission.title)
+#await ctx.channel.send("COMMENT:" + submission.comments[1].body)
+#await ctx.channel.send("UPVOTES: {}".format(submission.score))
+
+
+
+
 
 if __name__ == '__main__':
-    try:
-        client.run(TOKEN)
-    except KeyboardInterrupt:
-        print('exiting\n')
-        exit(0)
-    except:
-        pass
+	try:
+		client.run(TOKEN)
+	except KeyboardInterrupt:
+		print('exiting\n')
+		exit(0)
+	except:
+		pass
\ No newline at end of file
